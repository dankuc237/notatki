{
	"nodes":[
		{"id":"c9c5724d69957760","type":"file","file":"mindmapa/protocols/LM_NTLM_NTLMv2.md","x":-1000,"y":-540,"width":1260,"height":1880},
		{"id":"b4d1290bfa4be119","type":"file","file":"mindmapa/protocols/NetBIOS.md","x":-1880,"y":-540,"width":802,"height":980},
		{"id":"47dea7983083bbd8","type":"text","text":"# LDAP\nLDAP (U:389)\nLightweight Directory Access Protocol\nU:389 - LDAP services\n```mermaid\ngraph TD\n    subgraph LDAP_Application[LDAP Application]\n        DirectoryServer[Directory Server<br> - Stores directory information .]\n        LDAPClient[LDAP Client<br> - Accesses and interacts with the directory server .]\n    end\n```\n\n```mermaid\ngraph TD\n    subgraph _[Transport Layer &lpar;ISO/OSI 4 Layer&rpar;]\n        TCP\n    end\n    subgraph LDAP_over_TCP_IP[LDAP over TCP/IP]\n        TCP -->|TCP:389| LDAP[LDAP<br>Directory services .]\n    end\n    LDAP --> LDAP_Functions\n    subgraph LDAP_Functions[LDAP Functions]\n        Search[Search<br> - Query directory information]\n        Add[Add<br> - Add new directory entries]\n        Modify[Modify<br> - Modify existing directory entries]\n        Delete[Delete<br> - Delete directory entries]\n    end\n    Search --> Add\n    Add --> Modify\n    Modify --> Delete\n    Search --> Modify\n    Add --> Delete\n```\nProtokół LDAP to protokół dostępu do katalogów, który umożliwia zarządzanie informacjami w katalogu. Jest często używany w kontekście usługi Active Directory w systemach Windows, ale jest także powszechnie stosowany w innych środowiskach, w tym w środowiskach opartych na systemach operacyjnych Unix.\n\nLDAP działa na warstwie aplikacji modelu ISO/OSI i korzysta z protokołu TCP w celu nawiązania połączenia. Usługi LDAP są dostępne na porcie 389.\n\nPodstawowe funkcje LDAP obejmują:\n\n- **Search:** Pozwala na przeszukiwanie katalogu w celu uzyskania informacji.\n- **Add:** Umożliwia dodawanie nowych wpisów do katalogu.\n- **Modify:** Pozwala na modyfikację istniejących wpisów w katalogu.\n- **Delete:** Usuwa wpisy z katalogu.\n\nW środowisku Windows, LDAP jest często używany w kontekście zarządzania katalogiem Active Directory, umożliwiając administratorom przeszukiwanie, dodawanie, modyfikowanie i usuwanie informacji o obiektach w katalogu. LDAP jest również stosowany w innych scenariuszach, takich jak uwierzytelnianie użytkowników i dostęp do innych usług katalogowych.","x":1400,"y":-540,"width":800,"height":1640},
		{"id":"b2c10b955e0d95c5","type":"text","text":"# kerberos\nreplaced NTLM\nKerberos (U:88, T:389)\nKerberos\nU:88 - Kerberos services\nT:389 - LDAP services\n\n```mermaid\ngraph TD\n    subgraph Kerberos_Application[Kerberos Application]\n        AuthenticationServer[Authentication Server<br> - Issues TGTs<br> - Authenticates users .]\n        TicketGrantingServer[Ticket Granting Server<br> - Issues Service Tickets .]\n        ApplicationServer[Application Server<br> - Verifies Service Tickets .]\n    end\n\n```\n```mermaid\ngraph TD\n    subgraph _[Transport Layer &lpar;ISO/OSI 4 Layer&rpar;]\n        TCP\n        UDP\n    end\n    subgraph Kerberos_over_TCP_IP[Kerberos over TCP/IP]\n        TCP -->|TCP:88| Kerberos[Kerberos<br>Authentication services .]\n        UDP -->|UDP:389| LDAP[LDAP<br>Directory services .]\n    end\n    subgraph Kerberos_Auth[Kerberos Authentication]\n        TGT[TGT<br>Ticket Granting Ticket .]\n        TGS[TGS<br>Ticket Granting Server .]\n        ServiceTicket[Service Ticket .]\n    end\n    Kerberos --> Kerberos_Auth\n```\nProtokół Kerberos zapewnia usługi autentykacyjne w środowiskach sieciowych. Użytkownik uzyskuje bilet do korzystania z różnych zasobów w sieci, a serwery używają tych biletów do potwierdzania tożsamości użytkownika. Komunikacja między użytkownikiem, serwerem autentykacyjnym (AS), serwerem Granting Ticket (TGS) i serwerem aplikacji jest zabezpieczona przy użyciu różnych typów biletów i kluczy kryptograficznych.","x":560,"y":-540,"width":800,"height":1200},
		{"id":"09ddc588a32f3471","type":"text","text":"# Flow of messages during the LM and NTLMv1 authentication process\n\n```mermaid\nsequenceDiagram\n    participant Client\n    participant Server\n    Client ->> Server: Request for authentication (Message 1)\n    Server ->> Client: 8-byte challenge (Message 2)\n    Client ->> Server: Encrypted challenge using LM/NTLMv1 hash (Message 3)\n    Note over Server,Client: Attack scenario - Server impersonation\\nChallenge chosen by attacker\n    Client ->> Server: Hash (21 bytes: 3 blocks of 7 bytes + 1 parity byte)\n    Server ->> Server: Split hash into 3 blocks + 1 parity byte\n    Server ->> Client: Encrypted Server challenge using the 1st block (Message 3)\n    Server ->> Client: Encrypted Server challenge using the 2nd block (Message 3)\n    Server ->> Client: Encrypted Server challenge using the 3rd block (Message 3)\n    Note over Server,Client: Response is 24 bytes long (3 blocks of 8 bytes each)\n```\nfocusing on the attack scenario where the server is impersonated, and the challenge is chosen by the attacker. The client's hash is split into three blocks, each used as a key to encrypt the server challenge.","x":-1700,"y":1380,"width":1260,"height":1000},
		{"id":"424d581bebbf5ed0","type":"text","text":"# Changes in NTLMv2 vs NTLMv1:\n\n1. **Introduction:**\n\t\n\t- NTLMv2 was introduced as an improvement over NTLMv1 to address several security weaknesses.\n\n4. **Challenge Generation:**\n\n\t- NTLMv1 uses a fixed 8-byte challenge, making it susceptible to attacks\n\t- NTLMv2 employs a dynamic challenge generated by the server, enhancing security.\n5. **Hash Algorithm:**\n\t- NTLMv1 relies on a relatively weaker hash algorithm, making it vulnerable to rainbow table attacks.\n\t- NTLMv2 incorporates a more secure hash algorithm, making rainbow table attacks less effective.\n6. **Timestamp Inclusion:**\n\n\t- NTLMv1 does not include a timestamp in the Type 3 message, limiting its resistance against replay attacks.\n\t- NTLMv2 includes a timestamp in the response, mitigating replay attacks and enhancing overall security.\n7. **Session Security:**\n\t- NTLMv1 lacks session security features, making it susceptible to various attacks.\n\t- NTLMv2 incorporates session security mechanisms, adding an extra layer of protection against certain attacks.\n\n8. **Length of Response:**\n\t- NTLMv1 responses are fixed in length, making it easier for attackers to analyze and exploit.\n\t- NTLMv2 responses can vary in length, depending on factors such as the presence of extended session security, making attacks more complex.\n9. **Server Authentication:**\n\t \n\t - NTLMv1 is more prone to server impersonation attacks.\n\t - NTLMv2 enhances server authentication, reducing the risk of unauthorized server access.\n\n10. **Overall Security Posture:**\n\n\t - NTLMv2 is considered more secure due to its dynamic challenge, improved hash algorithm, timestamp inclusion, and enhanced session security.\n\n12. **Transition and Compatibility:**\n\n\t - Transitioning from NTLMv1 to NTLMv2 is recommended for improved security.\n\t - Compatibility concerns may arise during the transition, and system administrators should ensure proper configuration and support.","x":-370,"y":1380,"width":1260,"height":1040},
		{"id":"1e98558edc5a00e2","type":"text","text":"# LLMNR\nLink-Local Multicast Name Resolution\nU:5355\n\nLLMNR is a protocol used for name resolution in local networks, particularly in the absence of a DNS server. It operates at the link-local scope, meaning it is intended for use within a single subnet or broadcast domain. LLMNR (succesor of **NBT-NS** - NetBIOS Name Service) is designed to work with modern IPv6 networks.\n\nProvides name resolution services similar to NetBIOS but in the absence of a DNS server.\nOperates in a peer-to-peer fashion within a local network.\nEnables hosts to resolve names to IP addresses through multicast communication.\n\n```mermaid\ngraph TD\n    subgraph _ [Transport Layer &lpar;ISO/OSI 4 Layer&rpar;]\n        UDP\n    end\n    subgraph LLMNR over UDP/IP\n        UDP -->|UDP:5355| LLMNR[LLMNR<br><br>Link-Local Multicast Name Resolution<br> .] \n    end\n    LLMNR --> LLMNR_Application\n    subgraph LLMNR_Application [LLMNR Application]\n        Host1[Host 1<br>&lbrack;Name&rbrack;]\n        Host2[Host 2<br>&lbrack;Name&rbrack;]\n        Host3[Host 3<br>&lbrack;Name&rbrack;]\n    end\n\n```\n\n","x":-2720,"y":-540,"width":820,"height":920},
		{"id":"c9b466600f0159b7","type":"text","text":"NTLMv1 to starsza wersja protokołu NTLM, podczas gdy NTLMv2 to bardziej nowoczesna i bezpieczeniejsza\n\nNetNTLMv1 i NetNTLMv2 to formaty haszy używane w kontekście ataków łamania haseł","x":260,"y":1080,"width":480,"height":300}
	],
	"edges":[
		{"id":"471ffa90d817a4c6","fromNode":"c9c5724d69957760","fromSide":"right","toNode":"b2c10b955e0d95c5","toSide":"left","label":"zastąpił"}
	]
}